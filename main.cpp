#include <iostream>
#include <vector>
#include <string>
#include <thread>
#include <chrono>
#include <atomic>
#include <mutex>
#include <iomanip>

class Hryukoiner {
private:
    std::mutex output_mutex;
    std::atomic<bool> mining_complete{false};
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞
    static constexpr long long ITERATIONS_PER_BATCH = 100000;
    static constexpr double COINS_PER_BATCH = 0.01;
    static constexpr double TARGET_COINS = 1.0;
    static constexpr double MILLIONAIRE_TARGET = 1000000.0;
    
public:
    double mineWithThreads(int num_threads) {
        std::atomic<long long> total_iterations{0};
        std::vector<std::thread> threads;
        mining_complete = false;
        
        auto start_time = std::chrono::high_resolution_clock::now();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
        for (int i = 0; i < num_threads; ++i) {
            threads.emplace_back([this, &total_iterations, &mining_complete]() {
                while (!mining_complete.load()) {
                    // –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Ç–µ—Ä–∞—Ü–∏–∏ –º–∞–π–Ω–∏–Ω–≥–∞
                    for (int j = 0; j < ITERATIONS_PER_BATCH && !mining_complete.load(); ++j) {
                        // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –º–∞–π–Ω–∏–Ω–≥–∞
                        volatile int dummy = 0;
                        for (int k = 0; k < 100; ++k) {
                            dummy += k * k;
                        }
                    }
                    
                    total_iterations += ITERATIONS_PER_BATCH;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ —Ü–µ–ª–∏
                    double current_coins = static_cast<double>(total_iterations) / ITERATIONS_PER_BATCH * COINS_PER_BATCH;
                    if (current_coins >= TARGET_COINS && !mining_complete.exchange(true)) {
                        break;
                    }
                }
            });
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞–π–Ω–∏–Ω–≥–∞
        while (!mining_complete.load()) {
            std::this_thread::sleep_for(std::chrono::milliseconds(1));
        }
        
        auto end_time = std::chrono::high_resolution_clock::now();
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏
        for (auto& thread : threads) {
            if (thread.joinable()) {
                thread.join();
            }
        }
        
        std::chrono::duration<double> duration = end_time - start_time;
        return duration.count();
    }
    
    void calculateAndPrintResults(int num_threads, double mining_time) {
        std::lock_guard<std::mutex> lock(output_mutex);
        
        double iterations_per_second = (ITERATIONS_PER_BATCH / COINS_PER_BATCH * TARGET_COINS) / mining_time * num_threads;
        double time_for_million = (MILLIONAIRE_TARGET / TARGET_COINS) * mining_time;
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–Ω–∏/–≥–æ–¥—ã
        double seconds_in_day = 86400.0;
        double seconds_in_year = 31536000.0; // 365 –¥–Ω–µ–π
        
        double days = time_for_million / seconds_in_day;
        double years = time_for_million / seconds_in_year;
        
        std::cout << "=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è " << num_threads << " –ü–ö(–ø–æ—Ç–æ–∫–æ–≤) ===" << std::endl;
        std::cout << "–í—Ä–µ–º—è –º–∞–π–Ω–∏–Ω–≥–∞ 1 –•—Ä—é–∫–æ–∏–Ω–∞: " << std::fixed << std::setprecision(2) 
                  << mining_time << " —Å–µ–∫—É–Ω–¥" << std::endl;
        std::cout << "–°–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞: " << std::scientific << std::setprecision(2) 
                  << iterations_per_second << " –∏—Ç–µ—Ä–∞—Ü–∏–π/—Å–µ–∫" << std::endl;
        std::cout << std::fixed;
        
        std::cout << "–í—Ä–µ–º—è –¥–ª—è —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–º:" << std::endl;
        if (days < 365) {
            std::cout << "  " << std::setprecision(1) << days << " –¥–Ω–µ–π" << std::endl;
        } else {
            std::cout << "  " << std::setprecision(1) << years << " –ª–µ—Ç" << std::endl;
        }
        
        if (years > 100) {
            std::cout << "  üíÄ –í–∞—Å–∏–ª–∏—é —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞!" << std::endl;
        } else if (years > 10) {
            std::cout << "  ‚ö†Ô∏è  –ú–∞–π–Ω–∏–Ω–≥ –•—Ä—é–∫–æ–∏–Ω–æ–≤ - —ç—Ç–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è!" << std::endl;
        } else {
            std::cout << "  ‚úÖ –†–µ–∞–ª—å–Ω–∞—è —Ü–µ–ª—å! –£–¥–∞—á–∏ –í–∞—Å–∏–ª–∏—é!" << std::endl;
        }
        std::cout << std::endl;
    }
    
    void runAnalysis() {
        std::vector<int> thread_configs = {1, 2, 4};
        std::vector<double> mining_times;
        
        std::cout << "üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –º–∞–π–Ω–∏–Ω–≥–∞ –•—Ä—é–∫–æ–∏–Ω–æ–≤..." << std::endl;
        std::cout << "–•—Ä—é–∫–æ–∏–Ω–∏—Å—Ç-1: 100000 –∏—Ç–µ—Ä–∞—Ü–∏–π = 0.01 –•—Ä—é–∫–æ–∏–Ω–∞" << std::endl;
        std::cout << "–¶–µ–ª—å: 1 –•—Ä—é–∫–æ–∏–Ω" << std::endl << std::endl;
        
        // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        for (int num_threads : thread_configs) {
            double mining_time = mineWithThreads(num_threads);
            mining_times.push_back(mining_time);
            calculateAndPrintResults(num_threads, mining_time);
        }
        
        // –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        std::cout << "üìä –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:" << std::endl;
        for (size_t i = 1; i < mining_times.size(); ++i) {
            double speedup = mining_times[0] / mining_times[i];
            double efficiency = speedup / thread_configs[i] * 100;
            std::cout << thread_configs[i] << " –ø–æ—Ç–æ–∫–∞(–æ–≤) vs 1 –ø–æ—Ç–æ–∫: " 
                      << std::fixed << std::setprecision(2) << speedup << "x —É—Å–∫–æ—Ä–µ–Ω–∏–µ, "
                      << std::setprecision(1) << efficiency << "% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" << std::endl;
        }
    }
};

int main() {
    Hryukoiner miner;
    miner.runAnalysis();
    return 0;
}
